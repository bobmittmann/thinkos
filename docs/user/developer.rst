.. -*- coding: utf-8; mode: rst -*-
.. include:: refs.txt

.. _thinkos_usr_developer:

=====================
 Efficient Developer
=====================

Master your tools
==================

Automated Code Generation
==================

Embedded systems ...
In some circumstances there are some pieces of code can be ...
better performance comprises of a repetition of code that is tedious to type and error prone. Also in some contexts a generic solution that can be computed at runtime can be too expensive in terms of CPU usage to be computed in real-time. Or may require too much memory. A common solution for these problems is to use lookup tables and to interpolate intermidiate values, store coefficients in FLASH.
Even if you could afford to calculate a complex dataset some systems require a very fast boot-up response, so storing pre computed values is a sure way of impproving things.
We present here two typical scenarios where an automated generated code is benneficial for embedded systems.


Fixed-point sine function
-------------------------

Example sine function using Python.


IIR filter
----------

In this example we use a Julia script to calculate and automatically generate a very efficient C code for a low pass filter. By automating the code generation its easy to change the filter parameters, like cur off frequency, filter order without having to worry about synchronizing the design specs with your embedded code.


Embedded HTML pages
-------------------

Here HTML pages, or any pages for that matter, are automatically compressed, converted into C arrays. Makefile rules take care of the dependency of your code and the web pages, so the code is regenerated and compiled whenever a page is modified.


Autogenerated Code Comments
---------------------------

Always add a comment in the code indicating that it is automatically generated and a summary of instructions on how to regenerate it.

Example:


Makefiles
=========

Text Editor
===========


Multiple editor windows
-----------------------



