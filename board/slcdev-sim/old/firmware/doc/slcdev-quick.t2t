SLC Device Simulator
Quick Startup


= Connecting =
In order to configure the **SLC Device Simulator** you need a serial terminal program. 
For windows users we recomend [TeraTerm http://ttssh2.sourceforge.jp/index.html.en], which is Open Source and have scripting capabilities. A the time this page was created the most up to date version is [TeraTerm 4.84 http://sourceforge.jp/projects/ttssh2/downloads/61906/teraterm-4.84.exe].

Linux users can install the Minicom package.

Configure your serial terminal according to the following parameters:
- 115200 bps
- 8 data bits
- no parity
- 1 stop bit


After powering up you should get a version and copyright disclaimer, followed by the command prompt:
```
SLC Device Simulator 0.3 - Nov, 2014
(c) Copyright 2014 - Mircom Group

[DEV]$
```
If you connected after power up, just press **[Enter]** to get the prompt.

= Configuring =
In order for the simulator to run it's necessary to upload and compile 2 files:
- The Device Database: ''db.js''
- The Simulation Configuration: ''cfg.js''


Use the command **rx x** to upload the and compile the database in the simulator:
```
[DEV]$ db x
XMODEM receive: 'db.js'... CC
Erasing DB...
Compiling...
Model database
 - Desc: "Mircom SLC Device Simulator"
 - Version: 0.1.0
 - JSON: txt=0x08017004 len=15360 crc=0x495c
```
After uploading and compiling the database the configuration can be loaded and compiled. The procedure is similar to the database:
```
[DEV]$ cfg x
XMODEM receive: 'cfg.js'... CC
Erasing...
Compiling...
+ "2251 COPTIR" "Multicriteria Smoke Detector": 1
+ "2251 COPTIR" "Multicriteria Smoke Detector": 2
+ "2251 COPTIR" "Multicriteria Smoke Detector": 3 4 5 6 7 8 9 10
Saving...
 - Desc: "Coptir test"
 - Version: 0.1.0
 - JSON: txt=0x0801c004 len=2048 crc=0x7a80
```

The database most commonly is transfered once. There is no need to reload or recompile except, sometimes, after a firmware upgrade which require a different database format version.

= Tips =

== Enabling and Disabling devices ==

Devices (modules and sensors) when properly configure and enabled will respond when polled by the SLC. To prevent a particular device to respond it can be disabled. Disabling a device simulates the removal of the device from the loop.

The example bellow disables the modules 1, 4 and 10:
```
[DEV]$ d m 1 4 10
  Module 1
  Module 4
  Module 10
Disabled.
```
To enable the sensors 1, 22, 33, and 44:
```
[DEV]$ e s 1 22 33 44
  Sensor 1
  Sensor 22
  Sensor 33
  Sensor 44
Enabled.
```
Notice that only devices that have been configured can be enabled.

If you are not sure what devices are currently enabled, a quick listing of enabled devices can be obtained this way:
```
[DEV]$ e
Sensors:   1   2   3   4   5   6   7   8   9  10
Modules:   1   2   4   8
```

To enabled or disable all devices:
```
[DEV]$ e all
  All sensors
  All modules
Enabled.

[DEV]$ d all
  All sensors
  All modules
Disabled.
```

Enabling or disabling all configured sensors:
```
[DEV]$ e s all
  All sensors
Enabled.

[DEV]$ d s all
  All sensors
  Disabled.
```

Enabling or disabling all configured modules:
```
[DEV]$ e m all
  All modules
Enabled.

[DEV]$ d m all
  All modules
Disabled.
```

Enabling or disabling groups of devices:
```
[DEV]$ e g 4 5 6
  Group 4
  Group 5
  Group 6
Enabled.

[DEV]$ d g 1 2
  Group 1
  Group 2
Disabled.
```

Listing group of devices:

```
[DEV]$ grp

Group 1:
  Sensors:   1   2   3   4   5   6   7   8   9  10

Group 2:
  Sensors:   1   2

Group 3:
  Sensors:   3   4   5   6   7   8   9  10

Group 4:
  Modules:   1   2   4   8
```

== Stopping the Simulator ==

A faulty script in a configuration can cause the simulator to stop or print too much information on the console.
After booting up, the simulator will not run scripts or respond to SLC for 2 seconds, during this brief period it's possible to stop the simulator, preventing any script to run by typing:
```
[DEV]$ sim s
Simulation paused...
```
To restart the simulator:
```
[DEV]$ sim r
Simulation resumed...
```

